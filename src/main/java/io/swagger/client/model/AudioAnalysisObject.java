/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AudioAnalysisObjectMeta;
import io.swagger.client.model.AudioAnalysisObjectTrack;
import io.swagger.client.model.SectionObject;
import io.swagger.client.model.SegmentObject;
import io.swagger.client.model.TimeIntervalObject;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AudioAnalysisObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class AudioAnalysisObject {
  @SerializedName("meta")
  private AudioAnalysisObjectMeta meta = null;

  @SerializedName("track")
  private AudioAnalysisObjectTrack track = null;

  @SerializedName("bars")
  private List<TimeIntervalObject> bars = null;

  @SerializedName("beats")
  private List<TimeIntervalObject> beats = null;

  @SerializedName("sections")
  private List<SectionObject> sections = null;

  @SerializedName("segments")
  private List<SegmentObject> segments = null;

  @SerializedName("tatums")
  private List<TimeIntervalObject> tatums = null;

  public AudioAnalysisObject meta(AudioAnalysisObjectMeta meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @Schema(description = "")
  public AudioAnalysisObjectMeta getMeta() {
    return meta;
  }

  public void setMeta(AudioAnalysisObjectMeta meta) {
    this.meta = meta;
  }

  public AudioAnalysisObject track(AudioAnalysisObjectTrack track) {
    this.track = track;
    return this;
  }

   /**
   * Get track
   * @return track
  **/
  @Schema(description = "")
  public AudioAnalysisObjectTrack getTrack() {
    return track;
  }

  public void setTrack(AudioAnalysisObjectTrack track) {
    this.track = track;
  }

  public AudioAnalysisObject bars(List<TimeIntervalObject> bars) {
    this.bars = bars;
    return this;
  }

  public AudioAnalysisObject addBarsItem(TimeIntervalObject barsItem) {
    if (this.bars == null) {
      this.bars = new ArrayList<TimeIntervalObject>();
    }
    this.bars.add(barsItem);
    return this;
  }

   /**
   * The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
   * @return bars
  **/
  @Schema(description = "The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.")
  public List<TimeIntervalObject> getBars() {
    return bars;
  }

  public void setBars(List<TimeIntervalObject> bars) {
    this.bars = bars;
  }

  public AudioAnalysisObject beats(List<TimeIntervalObject> beats) {
    this.beats = beats;
    return this;
  }

  public AudioAnalysisObject addBeatsItem(TimeIntervalObject beatsItem) {
    if (this.beats == null) {
      this.beats = new ArrayList<TimeIntervalObject>();
    }
    this.beats.add(beatsItem);
    return this;
  }

   /**
   * The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
   * @return beats
  **/
  @Schema(description = "The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.")
  public List<TimeIntervalObject> getBeats() {
    return beats;
  }

  public void setBeats(List<TimeIntervalObject> beats) {
    this.beats = beats;
  }

  public AudioAnalysisObject sections(List<SectionObject> sections) {
    this.sections = sections;
    return this;
  }

  public AudioAnalysisObject addSectionsItem(SectionObject sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<SectionObject>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

   /**
   * Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
   * @return sections
  **/
  @Schema(description = "Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.")
  public List<SectionObject> getSections() {
    return sections;
  }

  public void setSections(List<SectionObject> sections) {
    this.sections = sections;
  }

  public AudioAnalysisObject segments(List<SegmentObject> segments) {
    this.segments = segments;
    return this;
  }

  public AudioAnalysisObject addSegmentsItem(SegmentObject segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<SegmentObject>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

   /**
   * Each segment contains a roughly conisistent sound throughout its duration.
   * @return segments
  **/
  @Schema(description = "Each segment contains a roughly conisistent sound throughout its duration.")
  public List<SegmentObject> getSegments() {
    return segments;
  }

  public void setSegments(List<SegmentObject> segments) {
    this.segments = segments;
  }

  public AudioAnalysisObject tatums(List<TimeIntervalObject> tatums) {
    this.tatums = tatums;
    return this;
  }

  public AudioAnalysisObject addTatumsItem(TimeIntervalObject tatumsItem) {
    if (this.tatums == null) {
      this.tatums = new ArrayList<TimeIntervalObject>();
    }
    this.tatums.add(tatumsItem);
    return this;
  }

   /**
   * A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
   * @return tatums
  **/
  @Schema(description = "A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).")
  public List<TimeIntervalObject> getTatums() {
    return tatums;
  }

  public void setTatums(List<TimeIntervalObject> tatums) {
    this.tatums = tatums;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioAnalysisObject audioAnalysisObject = (AudioAnalysisObject) o;
    return Objects.equals(this.meta, audioAnalysisObject.meta) &&
        Objects.equals(this.track, audioAnalysisObject.track) &&
        Objects.equals(this.bars, audioAnalysisObject.bars) &&
        Objects.equals(this.beats, audioAnalysisObject.beats) &&
        Objects.equals(this.sections, audioAnalysisObject.sections) &&
        Objects.equals(this.segments, audioAnalysisObject.segments) &&
        Objects.equals(this.tatums, audioAnalysisObject.tatums);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, track, bars, beats, sections, segments, tatums);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioAnalysisObject {\n");
    
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    bars: ").append(toIndentedString(bars)).append("\n");
    sb.append("    beats: ").append(toIndentedString(beats)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    tatums: ").append(toIndentedString(tatums)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

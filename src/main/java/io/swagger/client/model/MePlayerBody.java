/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * MePlayerBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class MePlayerBody extends HashMap<String, Object> {
  @SerializedName("device_ids")
  private List<String> deviceIds = new ArrayList<String>();

  @SerializedName("play")
  private Boolean play = null;

  public MePlayerBody deviceIds(List<String> deviceIds) {
    this.deviceIds = deviceIds;
    return this;
  }

  public MePlayerBody addDeviceIdsItem(String deviceIdsItem) {
    this.deviceIds.add(deviceIdsItem);
    return this;
  }

   /**
   * A JSON array containing the ID of the device on which playback should be started/transferred.&lt;br/&gt;For example:&#x60;{device_ids:[\&quot;74ASZWbe4lXaubB36ztrGX\&quot;]}&#x60;&lt;br/&gt;_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return &#x60;400 Bad Request&#x60;_ 
   * @return deviceIds
  **/
  @Schema(required = true, description = "A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:[\"74ASZWbe4lXaubB36ztrGX\"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_ ")
  public List<String> getDeviceIds() {
    return deviceIds;
  }

  public void setDeviceIds(List<String> deviceIds) {
    this.deviceIds = deviceIds;
  }

  public MePlayerBody play(Boolean play) {
    this.play = play;
    return this;
  }

   /**
   * **true**: ensure playback happens on new device.&lt;br/&gt;**false** or not provided: keep the current playback state. 
   * @return play
  **/
  @Schema(description = "**true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state. ")
  public Boolean isPlay() {
    return play;
  }

  public void setPlay(Boolean play) {
    this.play = play;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MePlayerBody mePlayerBody = (MePlayerBody) o;
    return Objects.equals(this.deviceIds, mePlayerBody.deviceIds) &&
        Objects.equals(this.play, mePlayerBody.play) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceIds, play, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MePlayerBody {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    deviceIds: ").append(toIndentedString(deviceIds)).append("\n");
    sb.append("    play: ").append(toIndentedString(play)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

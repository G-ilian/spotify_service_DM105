/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SimplifiedAlbumObject;
import io.swagger.client.model.SimplifiedArtistObject;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.List;
/**
 * ArtistDiscographyAlbumObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class ArtistDiscographyAlbumObject extends SimplifiedAlbumObject {
  /**
   * This field describes the relationship between the artist and the album. 
   */
  @JsonAdapter(AlbumGroupEnum.Adapter.class)
  public enum AlbumGroupEnum {
    @SerializedName("album")
    ALBUM("album"),
    @SerializedName("single")
    SINGLE("single"),
    @SerializedName("compilation")
    COMPILATION("compilation"),
    @SerializedName("appears_on")
    APPEARS_ON("appears_on");

    private String value;

    AlbumGroupEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AlbumGroupEnum fromValue(String input) {
      for (AlbumGroupEnum b : AlbumGroupEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AlbumGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlbumGroupEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AlbumGroupEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AlbumGroupEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("album_group")
  private AlbumGroupEnum albumGroup = null;

  public ArtistDiscographyAlbumObject albumGroup(AlbumGroupEnum albumGroup) {
    this.albumGroup = albumGroup;
    return this;
  }

   /**
   * This field describes the relationship between the artist and the album. 
   * @return albumGroup
  **/
  @Schema(example = "compilation", required = true, description = "This field describes the relationship between the artist and the album. ")
  public AlbumGroupEnum getAlbumGroup() {
    return albumGroup;
  }

  public void setAlbumGroup(AlbumGroupEnum albumGroup) {
    this.albumGroup = albumGroup;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArtistDiscographyAlbumObject artistDiscographyAlbumObject = (ArtistDiscographyAlbumObject) o;
    return Objects.equals(this.albumGroup, artistDiscographyAlbumObject.albumGroup) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumGroup, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArtistDiscographyAlbumObject {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    albumGroup: ").append(toIndentedString(albumGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

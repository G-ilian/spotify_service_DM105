/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * PlayHistoryObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class PlayHistoryObject {
  @SerializedName("track")
  private AllOfPlayHistoryObjectTrack track = null;

  @SerializedName("played_at")
  private OffsetDateTime playedAt = null;

  @SerializedName("context")
  private AllOfPlayHistoryObjectContext context = null;

  public PlayHistoryObject track(AllOfPlayHistoryObjectTrack track) {
    this.track = track;
    return this;
  }

   /**
   * The track the user listened to.
   * @return track
  **/
  @Schema(description = "The track the user listened to.")
  public AllOfPlayHistoryObjectTrack getTrack() {
    return track;
  }

  public void setTrack(AllOfPlayHistoryObjectTrack track) {
    this.track = track;
  }

  public PlayHistoryObject playedAt(OffsetDateTime playedAt) {
    this.playedAt = playedAt;
    return this;
  }

   /**
   * The date and time the track was played.
   * @return playedAt
  **/
  @Schema(description = "The date and time the track was played.")
  public OffsetDateTime getPlayedAt() {
    return playedAt;
  }

  public void setPlayedAt(OffsetDateTime playedAt) {
    this.playedAt = playedAt;
  }

  public PlayHistoryObject context(AllOfPlayHistoryObjectContext context) {
    this.context = context;
    return this;
  }

   /**
   * The context the track was played from.
   * @return context
  **/
  @Schema(description = "The context the track was played from.")
  public AllOfPlayHistoryObjectContext getContext() {
    return context;
  }

  public void setContext(AllOfPlayHistoryObjectContext context) {
    this.context = context;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayHistoryObject playHistoryObject = (PlayHistoryObject) o;
    return Objects.equals(this.track, playHistoryObject.track) &&
        Objects.equals(this.playedAt, playHistoryObject.playedAt) &&
        Objects.equals(this.context, playHistoryObject.context);
  }

  @Override
  public int hashCode() {
    return Objects.hash(track, playedAt, context);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayHistoryObject {\n");
    
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    playedAt: ").append(toIndentedString(playedAt)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

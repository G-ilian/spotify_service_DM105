/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AlbumBase;
import io.swagger.client.model.CopyrightObject;
import io.swagger.client.model.ImageObject;
import io.swagger.client.model.SimplifiedArtistObject;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AlbumObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class AlbumObject extends AlbumBase {
  @SerializedName("artists")
  private List<SimplifiedArtistObject> artists = new ArrayList<SimplifiedArtistObject>();

  @SerializedName("tracks")
  private Object tracks = null;

  @SerializedName("copyrights")
  private List<CopyrightObject> copyrights = new ArrayList<CopyrightObject>();

  @SerializedName("external_ids")
  private Object externalIds = null;

  @SerializedName("genres")
  private List<String> genres = new ArrayList<String>();

  @SerializedName("label")
  private String label = null;

  @SerializedName("popularity")
  private Integer popularity = null;

  public AlbumObject artists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
    return this;
  }

  public AlbumObject addArtistsItem(SimplifiedArtistObject artistsItem) {
    this.artists.add(artistsItem);
    return this;
  }

   /**
   * The artists of the album. Each artist object includes a link in &#x60;href&#x60; to more detailed information about the artist. 
   * @return artists
  **/
  @Schema(required = true, description = "The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. ")
  public List<SimplifiedArtistObject> getArtists() {
    return artists;
  }

  public void setArtists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
  }

  public AlbumObject tracks(Object tracks) {
    this.tracks = tracks;
    return this;
  }

   /**
   * The tracks of the album. 
   * @return tracks
  **/
  @Schema(required = true, description = "The tracks of the album. ")
  public Object getTracks() {
    return tracks;
  }

  public void setTracks(Object tracks) {
    this.tracks = tracks;
  }

  public AlbumObject copyrights(List<CopyrightObject> copyrights) {
    this.copyrights = copyrights;
    return this;
  }

  public AlbumObject addCopyrightsItem(CopyrightObject copyrightsItem) {
    this.copyrights.add(copyrightsItem);
    return this;
  }

   /**
   * The copyright statements of the album. 
   * @return copyrights
  **/
  @Schema(required = true, description = "The copyright statements of the album. ")
  public List<CopyrightObject> getCopyrights() {
    return copyrights;
  }

  public void setCopyrights(List<CopyrightObject> copyrights) {
    this.copyrights = copyrights;
  }

  public AlbumObject externalIds(Object externalIds) {
    this.externalIds = externalIds;
    return this;
  }

   /**
   * Known external IDs for the album. 
   * @return externalIds
  **/
  @Schema(required = true, description = "Known external IDs for the album. ")
  public Object getExternalIds() {
    return externalIds;
  }

  public void setExternalIds(Object externalIds) {
    this.externalIds = externalIds;
  }

  public AlbumObject genres(List<String> genres) {
    this.genres = genres;
    return this;
  }

  public AlbumObject addGenresItem(String genresItem) {
    this.genres.add(genresItem);
    return this;
  }

   /**
   * A list of the genres the album is associated with. If not yet classified, the array is empty. 
   * @return genres
  **/
  @Schema(example = "[\"Egg punk\",\"Noise rock\"]", required = true, description = "A list of the genres the album is associated with. If not yet classified, the array is empty. ")
  public List<String> getGenres() {
    return genres;
  }

  public void setGenres(List<String> genres) {
    this.genres = genres;
  }

  public AlbumObject label(String label) {
    this.label = label;
    return this;
  }

   /**
   * The label associated with the album. 
   * @return label
  **/
  @Schema(required = true, description = "The label associated with the album. ")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public AlbumObject popularity(Integer popularity) {
    this.popularity = popularity;
    return this;
  }

   /**
   * The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. 
   * @return popularity
  **/
  @Schema(required = true, description = "The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. ")
  public Integer getPopularity() {
    return popularity;
  }

  public void setPopularity(Integer popularity) {
    this.popularity = popularity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumObject albumObject = (AlbumObject) o;
    return Objects.equals(this.artists, albumObject.artists) &&
        Objects.equals(this.tracks, albumObject.tracks) &&
        Objects.equals(this.copyrights, albumObject.copyrights) &&
        Objects.equals(this.externalIds, albumObject.externalIds) &&
        Objects.equals(this.genres, albumObject.genres) &&
        Objects.equals(this.label, albumObject.label) &&
        Objects.equals(this.popularity, albumObject.popularity) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artists, tracks, copyrights, externalIds, genres, label, popularity, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumObject {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    copyrights: ").append(toIndentedString(copyrights)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

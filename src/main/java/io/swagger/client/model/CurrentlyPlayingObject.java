/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CurrentlyPlayingObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class CurrentlyPlayingObject {
  @SerializedName("context")
  private AllOfCurrentlyPlayingObjectContext context = null;

  @SerializedName("timestamp")
  private Long timestamp = null;

  @SerializedName("progress_ms")
  private Integer progressMs = null;

  @SerializedName("is_playing")
  private Boolean isPlaying = null;

  @SerializedName("item")
  private OneOfCurrentlyPlayingObjectItem item = null;

  @SerializedName("currently_playing_type")
  private String currentlyPlayingType = null;

  @SerializedName("actions")
  private AllOfCurrentlyPlayingObjectActions actions = null;

  public CurrentlyPlayingObject context(AllOfCurrentlyPlayingObjectContext context) {
    this.context = context;
    return this;
  }

   /**
   * A Context Object. Can be &#x60;null&#x60;.
   * @return context
  **/
  @Schema(description = "A Context Object. Can be `null`.")
  public AllOfCurrentlyPlayingObjectContext getContext() {
    return context;
  }

  public void setContext(AllOfCurrentlyPlayingObjectContext context) {
    this.context = context;
  }

  public CurrentlyPlayingObject timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Unix Millisecond Timestamp when data was fetched
   * @return timestamp
  **/
  @Schema(description = "Unix Millisecond Timestamp when data was fetched")
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public CurrentlyPlayingObject progressMs(Integer progressMs) {
    this.progressMs = progressMs;
    return this;
  }

   /**
   * Progress into the currently playing track or episode. Can be &#x60;null&#x60;.
   * @return progressMs
  **/
  @Schema(description = "Progress into the currently playing track or episode. Can be `null`.")
  public Integer getProgressMs() {
    return progressMs;
  }

  public void setProgressMs(Integer progressMs) {
    this.progressMs = progressMs;
  }

  public CurrentlyPlayingObject isPlaying(Boolean isPlaying) {
    this.isPlaying = isPlaying;
    return this;
  }

   /**
   * If something is currently playing, return &#x60;true&#x60;.
   * @return isPlaying
  **/
  @Schema(description = "If something is currently playing, return `true`.")
  public Boolean isIsPlaying() {
    return isPlaying;
  }

  public void setIsPlaying(Boolean isPlaying) {
    this.isPlaying = isPlaying;
  }

  public CurrentlyPlayingObject item(OneOfCurrentlyPlayingObjectItem item) {
    this.item = item;
    return this;
  }

   /**
   * The currently playing track or episode. Can be &#x60;null&#x60;.
   * @return item
  **/
  @Schema(description = "The currently playing track or episode. Can be `null`.")
  public OneOfCurrentlyPlayingObjectItem getItem() {
    return item;
  }

  public void setItem(OneOfCurrentlyPlayingObjectItem item) {
    this.item = item;
  }

  public CurrentlyPlayingObject currentlyPlayingType(String currentlyPlayingType) {
    this.currentlyPlayingType = currentlyPlayingType;
    return this;
  }

   /**
   * The object type of the currently playing item. Can be one of &#x60;track&#x60;, &#x60;episode&#x60;, &#x60;ad&#x60; or &#x60;unknown&#x60;. 
   * @return currentlyPlayingType
  **/
  @Schema(description = "The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. ")
  public String getCurrentlyPlayingType() {
    return currentlyPlayingType;
  }

  public void setCurrentlyPlayingType(String currentlyPlayingType) {
    this.currentlyPlayingType = currentlyPlayingType;
  }

  public CurrentlyPlayingObject actions(AllOfCurrentlyPlayingObjectActions actions) {
    this.actions = actions;
    return this;
  }

   /**
   * Allows to update the user interface based on which playback actions are available within the current context. 
   * @return actions
  **/
  @Schema(description = "Allows to update the user interface based on which playback actions are available within the current context. ")
  public AllOfCurrentlyPlayingObjectActions getActions() {
    return actions;
  }

  public void setActions(AllOfCurrentlyPlayingObjectActions actions) {
    this.actions = actions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentlyPlayingObject currentlyPlayingObject = (CurrentlyPlayingObject) o;
    return Objects.equals(this.context, currentlyPlayingObject.context) &&
        Objects.equals(this.timestamp, currentlyPlayingObject.timestamp) &&
        Objects.equals(this.progressMs, currentlyPlayingObject.progressMs) &&
        Objects.equals(this.isPlaying, currentlyPlayingObject.isPlaying) &&
        Objects.equals(this.item, currentlyPlayingObject.item) &&
        Objects.equals(this.currentlyPlayingType, currentlyPlayingObject.currentlyPlayingType) &&
        Objects.equals(this.actions, currentlyPlayingObject.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, timestamp, progressMs, isPlaying, item, currentlyPlayingType, actions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentlyPlayingObject {\n");
    
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    progressMs: ").append(toIndentedString(progressMs)).append("\n");
    sb.append("    isPlaying: ").append(toIndentedString(isPlaying)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    currentlyPlayingType: ").append(toIndentedString(currentlyPlayingType)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ImageObject;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AlbumBase
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class AlbumBase {
  /**
   * The type of the album. 
   */
  @JsonAdapter(AlbumTypeEnum.Adapter.class)
  public enum AlbumTypeEnum {
    @SerializedName("album")
    ALBUM("album"),
    @SerializedName("single")
    SINGLE("single"),
    @SerializedName("compilation")
    COMPILATION("compilation");

    private String value;

    AlbumTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AlbumTypeEnum fromValue(String input) {
      for (AlbumTypeEnum b : AlbumTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AlbumTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlbumTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AlbumTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AlbumTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("album_type")
  private AlbumTypeEnum albumType = null;

  @SerializedName("total_tracks")
  private Integer totalTracks = null;

  @SerializedName("available_markets")
  private List<String> availableMarkets = new ArrayList<String>();

  @SerializedName("external_urls")
  private AllOfAlbumBaseExternalUrls externalUrls = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("images")
  private List<ImageObject> images = new ArrayList<ImageObject>();

  @SerializedName("name")
  private String name = null;

  @SerializedName("release_date")
  private String releaseDate = null;

  /**
   * The precision with which &#x60;release_date&#x60; value is known. 
   */
  @JsonAdapter(ReleaseDatePrecisionEnum.Adapter.class)
  public enum ReleaseDatePrecisionEnum {
    @SerializedName("year")
    YEAR("year"),
    @SerializedName("month")
    MONTH("month"),
    @SerializedName("day")
    DAY("day");

    private String value;

    ReleaseDatePrecisionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ReleaseDatePrecisionEnum fromValue(String input) {
      for (ReleaseDatePrecisionEnum b : ReleaseDatePrecisionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ReleaseDatePrecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReleaseDatePrecisionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ReleaseDatePrecisionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ReleaseDatePrecisionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("release_date_precision")
  private ReleaseDatePrecisionEnum releaseDatePrecision = null;

  @SerializedName("restrictions")
  private AllOfAlbumBaseRestrictions restrictions = null;

  /**
   * The object type. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("album")
    ALBUM("album");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("uri")
  private String uri = null;

  public AlbumBase albumType(AlbumTypeEnum albumType) {
    this.albumType = albumType;
    return this;
  }

   /**
   * The type of the album. 
   * @return albumType
  **/
  @Schema(example = "compilation", required = true, description = "The type of the album. ")
  public AlbumTypeEnum getAlbumType() {
    return albumType;
  }

  public void setAlbumType(AlbumTypeEnum albumType) {
    this.albumType = albumType;
  }

  public AlbumBase totalTracks(Integer totalTracks) {
    this.totalTracks = totalTracks;
    return this;
  }

   /**
   * The number of tracks in the album.
   * @return totalTracks
  **/
  @Schema(example = "9", required = true, description = "The number of tracks in the album.")
  public Integer getTotalTracks() {
    return totalTracks;
  }

  public void setTotalTracks(Integer totalTracks) {
    this.totalTracks = totalTracks;
  }

  public AlbumBase availableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
    return this;
  }

  public AlbumBase addAvailableMarketsItem(String availableMarketsItem) {
    this.availableMarkets.add(availableMarketsItem);
    return this;
  }

   /**
   * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
   * @return availableMarkets
  **/
  @Schema(example = "[\"CA\",\"BR\",\"IT\"]", required = true, description = "The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ ")
  public List<String> getAvailableMarkets() {
    return availableMarkets;
  }

  public void setAvailableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
  }

  public AlbumBase externalUrls(AllOfAlbumBaseExternalUrls externalUrls) {
    this.externalUrls = externalUrls;
    return this;
  }

   /**
   * Known external URLs for this album. 
   * @return externalUrls
  **/
  @Schema(required = true, description = "Known external URLs for this album. ")
  public AllOfAlbumBaseExternalUrls getExternalUrls() {
    return externalUrls;
  }

  public void setExternalUrls(AllOfAlbumBaseExternalUrls externalUrls) {
    this.externalUrls = externalUrls;
  }

  public AlbumBase href(String href) {
    this.href = href;
    return this;
  }

   /**
   * A link to the Web API endpoint providing full details of the album. 
   * @return href
  **/
  @Schema(required = true, description = "A link to the Web API endpoint providing full details of the album. ")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public AlbumBase id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
   * @return id
  **/
  @Schema(example = "2up3OPMp9Tb4dAKM2erWXQ", required = true, description = "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public AlbumBase images(List<ImageObject> images) {
    this.images = images;
    return this;
  }

  public AlbumBase addImagesItem(ImageObject imagesItem) {
    this.images.add(imagesItem);
    return this;
  }

   /**
   * The cover art for the album in various sizes, widest first. 
   * @return images
  **/
  @Schema(required = true, description = "The cover art for the album in various sizes, widest first. ")
  public List<ImageObject> getImages() {
    return images;
  }

  public void setImages(List<ImageObject> images) {
    this.images = images;
  }

  public AlbumBase name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the album. In case of an album takedown, the value may be an empty string. 
   * @return name
  **/
  @Schema(required = true, description = "The name of the album. In case of an album takedown, the value may be an empty string. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AlbumBase releaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * The date the album was first released. 
   * @return releaseDate
  **/
  @Schema(example = "1981-12", required = true, description = "The date the album was first released. ")
  public String getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }

  public AlbumBase releaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
    this.releaseDatePrecision = releaseDatePrecision;
    return this;
  }

   /**
   * The precision with which &#x60;release_date&#x60; value is known. 
   * @return releaseDatePrecision
  **/
  @Schema(example = "year", required = true, description = "The precision with which `release_date` value is known. ")
  public ReleaseDatePrecisionEnum getReleaseDatePrecision() {
    return releaseDatePrecision;
  }

  public void setReleaseDatePrecision(ReleaseDatePrecisionEnum releaseDatePrecision) {
    this.releaseDatePrecision = releaseDatePrecision;
  }

  public AlbumBase restrictions(AllOfAlbumBaseRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Included in the response when a content restriction is applied. 
   * @return restrictions
  **/
  @Schema(description = "Included in the response when a content restriction is applied. ")
  public AllOfAlbumBaseRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(AllOfAlbumBaseRestrictions restrictions) {
    this.restrictions = restrictions;
  }

  public AlbumBase type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The object type. 
   * @return type
  **/
  @Schema(required = true, description = "The object type. ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AlbumBase uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
   * @return uri
  **/
  @Schema(example = "spotify:album:2up3OPMp9Tb4dAKM2erWXQ", required = true, description = "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. ")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumBase albumBase = (AlbumBase) o;
    return Objects.equals(this.albumType, albumBase.albumType) &&
        Objects.equals(this.totalTracks, albumBase.totalTracks) &&
        Objects.equals(this.availableMarkets, albumBase.availableMarkets) &&
        Objects.equals(this.externalUrls, albumBase.externalUrls) &&
        Objects.equals(this.href, albumBase.href) &&
        Objects.equals(this.id, albumBase.id) &&
        Objects.equals(this.images, albumBase.images) &&
        Objects.equals(this.name, albumBase.name) &&
        Objects.equals(this.releaseDate, albumBase.releaseDate) &&
        Objects.equals(this.releaseDatePrecision, albumBase.releaseDatePrecision) &&
        Objects.equals(this.restrictions, albumBase.restrictions) &&
        Objects.equals(this.type, albumBase.type) &&
        Objects.equals(this.uri, albumBase.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(albumType, totalTracks, availableMarkets, externalUrls, href, id, images, name, releaseDate, releaseDatePrecision, restrictions, type, uri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumBase {\n");
    
    sb.append("    albumType: ").append(toIndentedString(albumType)).append("\n");
    sb.append("    totalTracks: ").append(toIndentedString(totalTracks)).append("\n");
    sb.append("    availableMarkets: ").append(toIndentedString(availableMarkets)).append("\n");
    sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseDatePrecision: ").append(toIndentedString(releaseDatePrecision)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

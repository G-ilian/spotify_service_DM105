/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.SimplifiedArtistObject;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * SimplifiedTrackObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-01T19:29:10.951410897Z[GMT]")

public class SimplifiedTrackObject {
  @SerializedName("artists")
  private List<SimplifiedArtistObject> artists = null;

  @SerializedName("available_markets")
  private List<String> availableMarkets = null;

  @SerializedName("disc_number")
  private Integer discNumber = null;

  @SerializedName("duration_ms")
  private Integer durationMs = null;

  @SerializedName("explicit")
  private Boolean explicit = null;

  @SerializedName("external_urls")
  private AllOfSimplifiedTrackObjectExternalUrls externalUrls = null;

  @SerializedName("href")
  private String href = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("is_playable")
  private Boolean isPlayable = null;

  @SerializedName("linked_from")
  private AllOfSimplifiedTrackObjectLinkedFrom linkedFrom = null;

  @SerializedName("restrictions")
  private AllOfSimplifiedTrackObjectRestrictions restrictions = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("preview_url")
  private String previewUrl = null;

  @SerializedName("track_number")
  private Integer trackNumber = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("uri")
  private String uri = null;

  @SerializedName("is_local")
  private Boolean isLocal = null;

  public SimplifiedTrackObject artists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
    return this;
  }

  public SimplifiedTrackObject addArtistsItem(SimplifiedArtistObject artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<SimplifiedArtistObject>();
    }
    this.artists.add(artistsItem);
    return this;
  }

   /**
   * The artists who performed the track. Each artist object includes a link in &#x60;href&#x60; to more detailed information about the artist.
   * @return artists
  **/
  @Schema(description = "The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.")
  public List<SimplifiedArtistObject> getArtists() {
    return artists;
  }

  public void setArtists(List<SimplifiedArtistObject> artists) {
    this.artists = artists;
  }

  public SimplifiedTrackObject availableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
    return this;
  }

  public SimplifiedTrackObject addAvailableMarketsItem(String availableMarketsItem) {
    if (this.availableMarkets == null) {
      this.availableMarkets = new ArrayList<String>();
    }
    this.availableMarkets.add(availableMarketsItem);
    return this;
  }

   /**
   * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
   * @return availableMarkets
  **/
  @Schema(description = "A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. ")
  public List<String> getAvailableMarkets() {
    return availableMarkets;
  }

  public void setAvailableMarkets(List<String> availableMarkets) {
    this.availableMarkets = availableMarkets;
  }

  public SimplifiedTrackObject discNumber(Integer discNumber) {
    this.discNumber = discNumber;
    return this;
  }

   /**
   * The disc number (usually &#x60;1&#x60; unless the album consists of more than one disc).
   * @return discNumber
  **/
  @Schema(description = "The disc number (usually `1` unless the album consists of more than one disc).")
  public Integer getDiscNumber() {
    return discNumber;
  }

  public void setDiscNumber(Integer discNumber) {
    this.discNumber = discNumber;
  }

  public SimplifiedTrackObject durationMs(Integer durationMs) {
    this.durationMs = durationMs;
    return this;
  }

   /**
   * The track length in milliseconds.
   * @return durationMs
  **/
  @Schema(description = "The track length in milliseconds.")
  public Integer getDurationMs() {
    return durationMs;
  }

  public void setDurationMs(Integer durationMs) {
    this.durationMs = durationMs;
  }

  public SimplifiedTrackObject explicit(Boolean explicit) {
    this.explicit = explicit;
    return this;
  }

   /**
   * Whether or not the track has explicit lyrics ( &#x60;true&#x60; &#x3D; yes it does; &#x60;false&#x60; &#x3D; no it does not OR unknown).
   * @return explicit
  **/
  @Schema(description = "Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).")
  public Boolean isExplicit() {
    return explicit;
  }

  public void setExplicit(Boolean explicit) {
    this.explicit = explicit;
  }

  public SimplifiedTrackObject externalUrls(AllOfSimplifiedTrackObjectExternalUrls externalUrls) {
    this.externalUrls = externalUrls;
    return this;
  }

   /**
   * External URLs for this track. 
   * @return externalUrls
  **/
  @Schema(description = "External URLs for this track. ")
  public AllOfSimplifiedTrackObjectExternalUrls getExternalUrls() {
    return externalUrls;
  }

  public void setExternalUrls(AllOfSimplifiedTrackObjectExternalUrls externalUrls) {
    this.externalUrls = externalUrls;
  }

  public SimplifiedTrackObject href(String href) {
    this.href = href;
    return this;
  }

   /**
   * A link to the Web API endpoint providing full details of the track.
   * @return href
  **/
  @Schema(description = "A link to the Web API endpoint providing full details of the track.")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public SimplifiedTrackObject id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
   * @return id
  **/
  @Schema(description = "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. ")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SimplifiedTrackObject isPlayable(Boolean isPlayable) {
    this.isPlayable = isPlayable;
    return this;
  }

   /**
   * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If &#x60;true&#x60;, the track is playable in the given market. Otherwise &#x60;false&#x60;. 
   * @return isPlayable
  **/
  @Schema(description = "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`. ")
  public Boolean isIsPlayable() {
    return isPlayable;
  }

  public void setIsPlayable(Boolean isPlayable) {
    this.isPlayable = isPlayable;
  }

  public SimplifiedTrackObject linkedFrom(AllOfSimplifiedTrackObjectLinkedFrom linkedFrom) {
    this.linkedFrom = linkedFrom;
    return this;
  }

   /**
   * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the &#x60;linked_from&#x60; object contains information about the originally requested track.
   * @return linkedFrom
  **/
  @Schema(description = "Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.")
  public AllOfSimplifiedTrackObjectLinkedFrom getLinkedFrom() {
    return linkedFrom;
  }

  public void setLinkedFrom(AllOfSimplifiedTrackObjectLinkedFrom linkedFrom) {
    this.linkedFrom = linkedFrom;
  }

  public SimplifiedTrackObject restrictions(AllOfSimplifiedTrackObjectRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Included in the response when a content restriction is applied. 
   * @return restrictions
  **/
  @Schema(description = "Included in the response when a content restriction is applied. ")
  public AllOfSimplifiedTrackObjectRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(AllOfSimplifiedTrackObjectRestrictions restrictions) {
    this.restrictions = restrictions;
  }

  public SimplifiedTrackObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the track.
   * @return name
  **/
  @Schema(description = "The name of the track.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SimplifiedTrackObject previewUrl(String previewUrl) {
    this.previewUrl = previewUrl;
    return this;
  }

   /**
   * A URL to a 30 second preview (MP3 format) of the track. 
   * @return previewUrl
  **/
  @Schema(description = "A URL to a 30 second preview (MP3 format) of the track. ")
  public String getPreviewUrl() {
    return previewUrl;
  }

  public void setPreviewUrl(String previewUrl) {
    this.previewUrl = previewUrl;
  }

  public SimplifiedTrackObject trackNumber(Integer trackNumber) {
    this.trackNumber = trackNumber;
    return this;
  }

   /**
   * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
   * @return trackNumber
  **/
  @Schema(description = "The number of the track. If an album has several discs, the track number is the number on the specified disc. ")
  public Integer getTrackNumber() {
    return trackNumber;
  }

  public void setTrackNumber(Integer trackNumber) {
    this.trackNumber = trackNumber;
  }

  public SimplifiedTrackObject type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The object type: \&quot;track\&quot;. 
   * @return type
  **/
  @Schema(description = "The object type: \"track\". ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public SimplifiedTrackObject uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
   * @return uri
  **/
  @Schema(description = "The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. ")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public SimplifiedTrackObject isLocal(Boolean isLocal) {
    this.isLocal = isLocal;
    return this;
  }

   /**
   * Whether or not the track is from a local file. 
   * @return isLocal
  **/
  @Schema(description = "Whether or not the track is from a local file. ")
  public Boolean isIsLocal() {
    return isLocal;
  }

  public void setIsLocal(Boolean isLocal) {
    this.isLocal = isLocal;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimplifiedTrackObject simplifiedTrackObject = (SimplifiedTrackObject) o;
    return Objects.equals(this.artists, simplifiedTrackObject.artists) &&
        Objects.equals(this.availableMarkets, simplifiedTrackObject.availableMarkets) &&
        Objects.equals(this.discNumber, simplifiedTrackObject.discNumber) &&
        Objects.equals(this.durationMs, simplifiedTrackObject.durationMs) &&
        Objects.equals(this.explicit, simplifiedTrackObject.explicit) &&
        Objects.equals(this.externalUrls, simplifiedTrackObject.externalUrls) &&
        Objects.equals(this.href, simplifiedTrackObject.href) &&
        Objects.equals(this.id, simplifiedTrackObject.id) &&
        Objects.equals(this.isPlayable, simplifiedTrackObject.isPlayable) &&
        Objects.equals(this.linkedFrom, simplifiedTrackObject.linkedFrom) &&
        Objects.equals(this.restrictions, simplifiedTrackObject.restrictions) &&
        Objects.equals(this.name, simplifiedTrackObject.name) &&
        Objects.equals(this.previewUrl, simplifiedTrackObject.previewUrl) &&
        Objects.equals(this.trackNumber, simplifiedTrackObject.trackNumber) &&
        Objects.equals(this.type, simplifiedTrackObject.type) &&
        Objects.equals(this.uri, simplifiedTrackObject.uri) &&
        Objects.equals(this.isLocal, simplifiedTrackObject.isLocal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artists, availableMarkets, discNumber, durationMs, explicit, externalUrls, href, id, isPlayable, linkedFrom, restrictions, name, previewUrl, trackNumber, type, uri, isLocal);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimplifiedTrackObject {\n");
    
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    availableMarkets: ").append(toIndentedString(availableMarkets)).append("\n");
    sb.append("    discNumber: ").append(toIndentedString(discNumber)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    explicit: ").append(toIndentedString(explicit)).append("\n");
    sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPlayable: ").append(toIndentedString(isPlayable)).append("\n");
    sb.append("    linkedFrom: ").append(toIndentedString(linkedFrom)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previewUrl: ").append(toIndentedString(previewUrl)).append("\n");
    sb.append("    trackNumber: ").append(toIndentedString(trackNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    isLocal: ").append(toIndentedString(isLocal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

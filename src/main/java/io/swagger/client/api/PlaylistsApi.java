/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ImageObject;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.PagingFeaturedPlaylistObject;
import io.swagger.client.model.PagingPlaylistObject;
import io.swagger.client.model.PagingPlaylistTrackObject;
import io.swagger.client.model.PlaylistIdTracksBody2;
import io.swagger.client.model.PlaylistObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaylistsApi {
    private ApiClient apiClient;

    public PlaylistsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addTracksToPlaylist
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTracksToPlaylistCall(String playlistId, Map<String, Object> body, Integer position, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (position != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("position", position));
        if (uris != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uris", uris));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTracksToPlaylistValidateBeforeCall(String playlistId, Map<String, Object> body, Integer position, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling addTracksToPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = addTracksToPlaylistCall(playlistId, body, position, uris, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 addTracksToPlaylist(String playlistId, Map<String, Object> body, Integer position, String uris) throws ApiException {
        ApiResponse<InlineResponse2008> resp = addTracksToPlaylistWithHttpInfo(playlistId, body, position, uris);
        return resp.getData();
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> addTracksToPlaylistWithHttpInfo(String playlistId, Map<String, Object> body, Integer position, String uris) throws ApiException {
        com.squareup.okhttp.Call call = addTracksToPlaylistValidateBeforeCall(playlistId, body, position, uris, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Items to Playlist  (asynchronously)
     * Add one or more items to a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTracksToPlaylistAsync(String playlistId, Map<String, Object> body, Integer position, String uris, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTracksToPlaylistValidateBeforeCall(playlistId, body, position, uris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for changePlaylistDetails
     * @param playlistId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changePlaylistDetailsCall(String playlistId, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changePlaylistDetailsValidateBeforeCall(String playlistId, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling changePlaylistDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = changePlaylistDetailsCall(playlistId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change Playlist Details 
     * Change a playlist&#x27;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changePlaylistDetails(String playlistId, Map<String, Object> body) throws ApiException {
        changePlaylistDetailsWithHttpInfo(playlistId, body);
    }

    /**
     * Change Playlist Details 
     * Change a playlist&#x27;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changePlaylistDetailsWithHttpInfo(String playlistId, Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = changePlaylistDetailsValidateBeforeCall(playlistId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change Playlist Details  (asynchronously)
     * Change a playlist&#x27;s name and public/private state. (The user must, of course, own the playlist.) 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changePlaylistDetailsAsync(String playlistId, Map<String, Object> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changePlaylistDetailsValidateBeforeCall(playlistId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkIfUserFollowsPlaylist
     * @param playlistId  (required)
     * @param ids  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkIfUserFollowsPlaylistCall(String playlistId, String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers/contains"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkIfUserFollowsPlaylistValidateBeforeCall(String playlistId, String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling checkIfUserFollowsPlaylist(Async)");
        }
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkIfUserFollowsPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = checkIfUserFollowsPlaylistCall(playlistId, ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @return List&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Boolean> checkIfUserFollowsPlaylist(String playlistId, String ids) throws ApiException {
        ApiResponse<List<Boolean>> resp = checkIfUserFollowsPlaylistWithHttpInfo(playlistId, ids);
        return resp.getData();
    }

    /**
     * Check if Users Follow Playlist 
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Boolean>> checkIfUserFollowsPlaylistWithHttpInfo(String playlistId, String ids) throws ApiException {
        com.squareup.okhttp.Call call = checkIfUserFollowsPlaylistValidateBeforeCall(playlistId, ids, null, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if Users Follow Playlist  (asynchronously)
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @param playlistId  (required)
     * @param ids  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkIfUserFollowsPlaylistAsync(String playlistId, String ids, final ApiCallback<List<Boolean>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkIfUserFollowsPlaylistValidateBeforeCall(playlistId, ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPlaylist
     * @param userId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPlaylistCall(String userId, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPlaylistValidateBeforeCall(String userId, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = createPlaylistCall(userId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @param userId  (required)
     * @param body  (optional)
     * @return PlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlaylistObject createPlaylist(String userId, Map<String, Object> body) throws ApiException {
        ApiResponse<PlaylistObject> resp = createPlaylistWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * Create Playlist 
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @param userId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;PlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlaylistObject> createPlaylistWithHttpInfo(String userId, Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = createPlaylistValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Playlist  (asynchronously)
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @param userId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPlaylistAsync(String userId, Map<String, Object> body, final ApiCallback<PlaylistObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPlaylistValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followPlaylist
     * @param playlistId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followPlaylistCall(String playlistId, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followPlaylistValidateBeforeCall(String playlistId, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling followPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = followPlaylistCall(playlistId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void followPlaylist(String playlistId, Map<String, Object> body) throws ApiException {
        followPlaylistWithHttpInfo(playlistId, body);
    }

    /**
     * Follow Playlist 
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> followPlaylistWithHttpInfo(String playlistId, Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = followPlaylistValidateBeforeCall(playlistId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Follow Playlist  (asynchronously)
     * Add the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followPlaylistAsync(String playlistId, Map<String, Object> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followPlaylistValidateBeforeCall(playlistId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getACategoriesPlaylists
     * @param categoryId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getACategoriesPlaylistsCall(String categoryId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browse/categories/{category_id}/playlists"
            .replaceAll("\\{" + "category_id" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getACategoriesPlaylistsValidateBeforeCall(String categoryId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getACategoriesPlaylists(Async)");
        }
        
        com.squareup.okhttp.Call call = getACategoriesPlaylistsCall(categoryId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Category&#x27;s Playlists 
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingFeaturedPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingFeaturedPlaylistObject getACategoriesPlaylists(String categoryId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingFeaturedPlaylistObject> resp = getACategoriesPlaylistsWithHttpInfo(categoryId, limit, offset);
        return resp.getData();
    }

    /**
     * Get Category&#x27;s Playlists 
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingFeaturedPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingFeaturedPlaylistObject> getACategoriesPlaylistsWithHttpInfo(String categoryId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getACategoriesPlaylistsValidateBeforeCall(categoryId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Category&#x27;s Playlists  (asynchronously)
     * Get a list of Spotify playlists tagged with a particular category. 
     * @param categoryId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getACategoriesPlaylistsAsync(String categoryId, Integer limit, Integer offset, final ApiCallback<PagingFeaturedPlaylistObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getACategoriesPlaylistsValidateBeforeCall(categoryId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAListOfCurrentUsersPlaylists
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAListOfCurrentUsersPlaylistsCall(Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/me/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAListOfCurrentUsersPlaylistsValidateBeforeCall(Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAListOfCurrentUsersPlaylistsCall(limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Current User&#x27;s Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingPlaylistObject getAListOfCurrentUsersPlaylists(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingPlaylistObject> resp = getAListOfCurrentUsersPlaylistsWithHttpInfo(limit, offset);
        return resp.getData();
    }

    /**
     * Get Current User&#x27;s Playlists 
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingPlaylistObject> getAListOfCurrentUsersPlaylistsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getAListOfCurrentUsersPlaylistsValidateBeforeCall(limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Current User&#x27;s Playlists  (asynchronously)
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAListOfCurrentUsersPlaylistsAsync(Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAListOfCurrentUsersPlaylistsValidateBeforeCall(limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeaturedPlaylists
     * @param locale  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeaturedPlaylistsCall(String locale, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/browse/featured-playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeaturedPlaylistsValidateBeforeCall(String locale, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getFeaturedPlaylistsCall(locale, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Featured Playlists 
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#x27;s &#x27;Browse&#x27; tab). 
     * @param locale  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingFeaturedPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingFeaturedPlaylistObject getFeaturedPlaylists(String locale, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingFeaturedPlaylistObject> resp = getFeaturedPlaylistsWithHttpInfo(locale, limit, offset);
        return resp.getData();
    }

    /**
     * Get Featured Playlists 
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#x27;s &#x27;Browse&#x27; tab). 
     * @param locale  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingFeaturedPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingFeaturedPlaylistObject> getFeaturedPlaylistsWithHttpInfo(String locale, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getFeaturedPlaylistsValidateBeforeCall(locale, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Featured Playlists  (asynchronously)
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#x27;s &#x27;Browse&#x27; tab). 
     * @param locale  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeaturedPlaylistsAsync(String locale, Integer limit, Integer offset, final ApiCallback<PagingFeaturedPlaylistObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeaturedPlaylistsValidateBeforeCall(locale, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingFeaturedPlaylistObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListUsersPlaylists
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListUsersPlaylistsCall(String userId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListUsersPlaylistsValidateBeforeCall(String userId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getListUsersPlaylists(Async)");
        }
        
        com.squareup.okhttp.Call call = getListUsersPlaylistsCall(userId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get User&#x27;s Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingPlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingPlaylistObject getListUsersPlaylists(String userId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingPlaylistObject> resp = getListUsersPlaylistsWithHttpInfo(userId, limit, offset);
        return resp.getData();
    }

    /**
     * Get User&#x27;s Playlists 
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingPlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingPlaylistObject> getListUsersPlaylistsWithHttpInfo(String userId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getListUsersPlaylistsValidateBeforeCall(userId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User&#x27;s Playlists  (asynchronously)
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @param userId  (required)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListUsersPlaylistsAsync(String userId, Integer limit, Integer offset, final ApiCallback<PagingPlaylistObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListUsersPlaylistsValidateBeforeCall(userId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingPlaylistObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlaylist
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaylistCall(String playlistId, String market, String fields, String additionalTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (additionalTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additional_types", additionalTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlaylistValidateBeforeCall(String playlistId, String market, String fields, String additionalTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = getPlaylistCall(playlistId, market, fields, additionalTypes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Playlist 
     * Get a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @return PlaylistObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlaylistObject getPlaylist(String playlistId, String market, String fields, String additionalTypes) throws ApiException {
        ApiResponse<PlaylistObject> resp = getPlaylistWithHttpInfo(playlistId, market, fields, additionalTypes);
        return resp.getData();
    }

    /**
     * Get Playlist 
     * Get a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @return ApiResponse&lt;PlaylistObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlaylistObject> getPlaylistWithHttpInfo(String playlistId, String market, String fields, String additionalTypes) throws ApiException {
        com.squareup.okhttp.Call call = getPlaylistValidateBeforeCall(playlistId, market, fields, additionalTypes, null, null);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Playlist  (asynchronously)
     * Get a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param additionalTypes  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaylistAsync(String playlistId, String market, String fields, String additionalTypes, final ApiCallback<PlaylistObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaylistValidateBeforeCall(playlistId, market, fields, additionalTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlaylistObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlaylistCover
     * @param playlistId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaylistCoverCall(String playlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/images"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlaylistCoverValidateBeforeCall(String playlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistCover(Async)");
        }
        
        com.squareup.okhttp.Call call = getPlaylistCoverCall(playlistId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Playlist Cover Image 
     * Get the current image associated with a specific playlist. 
     * @param playlistId  (required)
     * @return List&lt;ImageObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ImageObject> getPlaylistCover(String playlistId) throws ApiException {
        ApiResponse<List<ImageObject>> resp = getPlaylistCoverWithHttpInfo(playlistId);
        return resp.getData();
    }

    /**
     * Get Playlist Cover Image 
     * Get the current image associated with a specific playlist. 
     * @param playlistId  (required)
     * @return ApiResponse&lt;List&lt;ImageObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ImageObject>> getPlaylistCoverWithHttpInfo(String playlistId) throws ApiException {
        com.squareup.okhttp.Call call = getPlaylistCoverValidateBeforeCall(playlistId, null, null);
        Type localVarReturnType = new TypeToken<List<ImageObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Playlist Cover Image  (asynchronously)
     * Get the current image associated with a specific playlist. 
     * @param playlistId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaylistCoverAsync(String playlistId, final ApiCallback<List<ImageObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaylistCoverValidateBeforeCall(playlistId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ImageObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlaylistsTracks
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaylistsTracksCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (additionalTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additional_types", additionalTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlaylistsTracksValidateBeforeCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistsTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = getPlaylistsTracksCall(playlistId, market, fields, limit, offset, additionalTypes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return PagingPlaylistTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingPlaylistTrackObject getPlaylistsTracks(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        ApiResponse<PagingPlaylistTrackObject> resp = getPlaylistsTracksWithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
        return resp.getData();
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return ApiResponse&lt;PagingPlaylistTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingPlaylistTrackObject> getPlaylistsTracksWithHttpInfo(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        com.squareup.okhttp.Call call = getPlaylistsTracksValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, null, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Playlist Items  (asynchronously)
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaylistsTracksAsync(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback<PagingPlaylistTrackObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaylistsTracksValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeTracksPlaylist
     * @param playlistId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTracksPlaylistCall(String playlistId, PlaylistIdTracksBody2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTracksPlaylistValidateBeforeCall(String playlistId, PlaylistIdTracksBody2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling removeTracksPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = removeTracksPlaylistCall(playlistId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 removeTracksPlaylist(String playlistId, PlaylistIdTracksBody2 body) throws ApiException {
        ApiResponse<InlineResponse2008> resp = removeTracksPlaylistWithHttpInfo(playlistId, body);
        return resp.getData();
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> removeTracksPlaylistWithHttpInfo(String playlistId, PlaylistIdTracksBody2 body) throws ApiException {
        com.squareup.okhttp.Call call = removeTracksPlaylistValidateBeforeCall(playlistId, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Playlist Items  (asynchronously)
     * Remove one or more items from a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTracksPlaylistAsync(String playlistId, PlaylistIdTracksBody2 body, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTracksPlaylistValidateBeforeCall(playlistId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reorderOrReplacePlaylistsTracks
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reorderOrReplacePlaylistsTracksCall(String playlistId, Map<String, Object> body, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uris != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uris", uris));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reorderOrReplacePlaylistsTracksValidateBeforeCall(String playlistId, Map<String, Object> body, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling reorderOrReplacePlaylistsTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = reorderOrReplacePlaylistsTracksCall(playlistId, body, uris, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#x27;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#x27;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#x27;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#x27;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 reorderOrReplacePlaylistsTracks(String playlistId, Map<String, Object> body, String uris) throws ApiException {
        ApiResponse<InlineResponse2008> resp = reorderOrReplacePlaylistsTracksWithHttpInfo(playlistId, body, uris);
        return resp.getData();
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#x27;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#x27;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#x27;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#x27;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> reorderOrReplacePlaylistsTracksWithHttpInfo(String playlistId, Map<String, Object> body, String uris) throws ApiException {
        com.squareup.okhttp.Call call = reorderOrReplacePlaylistsTracksValidateBeforeCall(playlistId, body, uris, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Playlist Items  (asynchronously)
     * Either reorder or replace items in a playlist depending on the request&#x27;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#x27;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#x27;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#x27;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reorderOrReplacePlaylistsTracksAsync(String playlistId, Map<String, Object> body, String uris, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reorderOrReplacePlaylistsTracksValidateBeforeCall(playlistId, body, uris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unfollowPlaylist
     * @param playlistId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unfollowPlaylistCall(String playlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/followers"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unfollowPlaylistValidateBeforeCall(String playlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling unfollowPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = unfollowPlaylistCall(playlistId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unfollowPlaylist(String playlistId) throws ApiException {
        unfollowPlaylistWithHttpInfo(playlistId);
    }

    /**
     * Unfollow Playlist 
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unfollowPlaylistWithHttpInfo(String playlistId) throws ApiException {
        com.squareup.okhttp.Call call = unfollowPlaylistValidateBeforeCall(playlistId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unfollow Playlist  (asynchronously)
     * Remove the current user as a follower of a playlist. 
     * @param playlistId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unfollowPlaylistAsync(String playlistId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unfollowPlaylistValidateBeforeCall(playlistId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadCustomPlaylistCover
     * @param body  (required)
     * @param playlistId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadCustomPlaylistCoverCall(String body, String playlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/images"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "image/jpeg"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadCustomPlaylistCoverValidateBeforeCall(String body, String playlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadCustomPlaylistCover(Async)");
        }
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling uploadCustomPlaylistCover(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadCustomPlaylistCoverCall(body, playlistId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Custom Playlist Cover Image 
     * Replace the image used to represent a specific playlist. 
     * @param body  (required)
     * @param playlistId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadCustomPlaylistCover(String body, String playlistId) throws ApiException {
        uploadCustomPlaylistCoverWithHttpInfo(body, playlistId);
    }

    /**
     * Add Custom Playlist Cover Image 
     * Replace the image used to represent a specific playlist. 
     * @param body  (required)
     * @param playlistId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadCustomPlaylistCoverWithHttpInfo(String body, String playlistId) throws ApiException {
        com.squareup.okhttp.Call call = uploadCustomPlaylistCoverValidateBeforeCall(body, playlistId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add Custom Playlist Cover Image  (asynchronously)
     * Replace the image used to represent a specific playlist. 
     * @param body  (required)
     * @param playlistId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadCustomPlaylistCoverAsync(String body, String playlistId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadCustomPlaylistCoverValidateBeforeCall(body, playlistId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}

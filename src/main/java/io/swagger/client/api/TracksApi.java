/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AudioAnalysisObject;
import io.swagger.client.model.AudioFeaturesObject;
import java.math.BigDecimal;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.PagingPlaylistTrackObject;
import io.swagger.client.model.PagingSavedTrackObject;
import io.swagger.client.model.PagingSimplifiedTrackObject;
import io.swagger.client.model.PagingTrackObject;
import io.swagger.client.model.PlaylistIdTracksBody2;
import io.swagger.client.model.RecommendationsObject;
import io.swagger.client.model.TrackObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TracksApi {
    private ApiClient apiClient;

    public TracksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TracksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addTracksToPlaylist
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTracksToPlaylistCall(String playlistId, Map<String, Object> body, Integer position, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (position != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("position", position));
        if (uris != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uris", uris));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTracksToPlaylistValidateBeforeCall(String playlistId, Map<String, Object> body, Integer position, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling addTracksToPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = addTracksToPlaylistCall(playlistId, body, position, uris, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 addTracksToPlaylist(String playlistId, Map<String, Object> body, Integer position, String uris) throws ApiException {
        ApiResponse<InlineResponse2008> resp = addTracksToPlaylistWithHttpInfo(playlistId, body, position, uris);
        return resp.getData();
    }

    /**
     * Add Items to Playlist 
     * Add one or more items to a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> addTracksToPlaylistWithHttpInfo(String playlistId, Map<String, Object> body, Integer position, String uris) throws ApiException {
        com.squareup.okhttp.Call call = addTracksToPlaylistValidateBeforeCall(playlistId, body, position, uris, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Items to Playlist  (asynchronously)
     * Add one or more items to a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param position  (optional)
     * @param uris  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTracksToPlaylistAsync(String playlistId, Map<String, Object> body, Integer position, String uris, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTracksToPlaylistValidateBeforeCall(playlistId, body, position, uris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkUsersSavedTracks
     * @param ids  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkUsersSavedTracksCall(String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/me/tracks/contains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkUsersSavedTracksValidateBeforeCall(String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling checkUsersSavedTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = checkUsersSavedTracksCall(ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check User&#x27;s Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @return List&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Boolean> checkUsersSavedTracks(String ids) throws ApiException {
        ApiResponse<List<Boolean>> resp = checkUsersSavedTracksWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * Check User&#x27;s Saved Tracks 
     * Check if one or more tracks is already saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @return ApiResponse&lt;List&lt;Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Boolean>> checkUsersSavedTracksWithHttpInfo(String ids) throws ApiException {
        com.squareup.okhttp.Call call = checkUsersSavedTracksValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check User&#x27;s Saved Tracks  (asynchronously)
     * Check if one or more tracks is already saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkUsersSavedTracksAsync(String ids, final ApiCallback<List<Boolean>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkUsersSavedTracksValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Boolean>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnAlbumsTracks
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnAlbumsTracksCall(String id, String market, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/albums/{id}/tracks"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnAlbumsTracksValidateBeforeCall(String id, String market, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnAlbumsTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = getAnAlbumsTracksCall(id, market, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSimplifiedTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingSimplifiedTrackObject getAnAlbumsTracks(String id, String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSimplifiedTrackObject> resp = getAnAlbumsTracksWithHttpInfo(id, market, limit, offset);
        return resp.getData();
    }

    /**
     * Get Album Tracks 
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSimplifiedTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingSimplifiedTrackObject> getAnAlbumsTracksWithHttpInfo(String id, String market, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getAnAlbumsTracksValidateBeforeCall(id, market, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Album Tracks  (asynchronously)
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @param id  (required)
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnAlbumsTracksAsync(String id, String market, Integer limit, Integer offset, final ApiCallback<PagingSimplifiedTrackObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnAlbumsTracksValidateBeforeCall(id, market, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingSimplifiedTrackObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnArtistsTopTracks
     * @param id  (required)
     * @param market  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnArtistsTopTracksCall(String id, String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/artists/{id}/top-tracks"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnArtistsTopTracksValidateBeforeCall(String id, String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnArtistsTopTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = getAnArtistsTopTracksCall(id, market, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Artist&#x27;s Top Tracks 
     * Get Spotify catalog information about an artist&#x27;s top tracks by country. 
     * @param id  (required)
     * @param market  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getAnArtistsTopTracks(String id, String market) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getAnArtistsTopTracksWithHttpInfo(id, market);
        return resp.getData();
    }

    /**
     * Get Artist&#x27;s Top Tracks 
     * Get Spotify catalog information about an artist&#x27;s top tracks by country. 
     * @param id  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getAnArtistsTopTracksWithHttpInfo(String id, String market) throws ApiException {
        com.squareup.okhttp.Call call = getAnArtistsTopTracksValidateBeforeCall(id, market, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Artist&#x27;s Top Tracks  (asynchronously)
     * Get Spotify catalog information about an artist&#x27;s top tracks by country. 
     * @param id  (required)
     * @param market  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnArtistsTopTracksAsync(String id, String market, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnArtistsTopTracksValidateBeforeCall(id, market, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAudioAnalysis
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAudioAnalysisCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/audio-analysis/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAudioAnalysisValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudioAnalysis(Async)");
        }
        
        com.squareup.okhttp.Call call = getAudioAnalysisCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Track&#x27;s Audio Analysis 
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @param id  (required)
     * @return AudioAnalysisObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AudioAnalysisObject getAudioAnalysis(String id) throws ApiException {
        ApiResponse<AudioAnalysisObject> resp = getAudioAnalysisWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Track&#x27;s Audio Analysis 
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @param id  (required)
     * @return ApiResponse&lt;AudioAnalysisObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AudioAnalysisObject> getAudioAnalysisWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getAudioAnalysisValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<AudioAnalysisObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Track&#x27;s Audio Analysis  (asynchronously)
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAudioAnalysisAsync(String id, final ApiCallback<AudioAnalysisObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAudioAnalysisValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AudioAnalysisObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAudioFeatures
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAudioFeaturesCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/audio-features/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAudioFeaturesValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAudioFeatures(Async)");
        }
        
        com.squareup.okhttp.Call call = getAudioFeaturesCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Track&#x27;s Audio Features 
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @return AudioFeaturesObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AudioFeaturesObject getAudioFeatures(String id) throws ApiException {
        ApiResponse<AudioFeaturesObject> resp = getAudioFeaturesWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Track&#x27;s Audio Features 
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @return ApiResponse&lt;AudioFeaturesObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AudioFeaturesObject> getAudioFeaturesWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getAudioFeaturesValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<AudioFeaturesObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Track&#x27;s Audio Features  (asynchronously)
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAudioFeaturesAsync(String id, final ApiCallback<AudioFeaturesObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAudioFeaturesValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AudioFeaturesObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlaylistsTracks
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaylistsTracksCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (additionalTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("additional_types", additionalTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlaylistsTracksValidateBeforeCall(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistsTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = getPlaylistsTracksCall(playlistId, market, fields, limit, offset, additionalTypes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return PagingPlaylistTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingPlaylistTrackObject getPlaylistsTracks(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        ApiResponse<PagingPlaylistTrackObject> resp = getPlaylistsTracksWithHttpInfo(playlistId, market, fields, limit, offset, additionalTypes);
        return resp.getData();
    }

    /**
     * Get Playlist Items 
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @return ApiResponse&lt;PagingPlaylistTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingPlaylistTrackObject> getPlaylistsTracksWithHttpInfo(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes) throws ApiException {
        com.squareup.okhttp.Call call = getPlaylistsTracksValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, null, null);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Playlist Items  (asynchronously)
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @param playlistId  (required)
     * @param market  (optional)
     * @param fields  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param additionalTypes  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaylistsTracksAsync(String playlistId, String market, String fields, Integer limit, Integer offset, String additionalTypes, final ApiCallback<PagingPlaylistTrackObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaylistsTracksValidateBeforeCall(playlistId, market, fields, limit, offset, additionalTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingPlaylistTrackObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecommendations
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param seedArtists  (optional)
     * @param seedGenres  (optional)
     * @param seedTracks  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecommendationsCall(Integer limit, String market, String seedArtists, String seedGenres, String seedTracks, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));
        if (seedArtists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seed_artists", seedArtists));
        if (seedGenres != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seed_genres", seedGenres));
        if (seedTracks != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("seed_tracks", seedTracks));
        if (minAcousticness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_acousticness", minAcousticness));
        if (maxAcousticness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_acousticness", maxAcousticness));
        if (targetAcousticness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_acousticness", targetAcousticness));
        if (minDanceability != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_danceability", minDanceability));
        if (maxDanceability != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_danceability", maxDanceability));
        if (targetDanceability != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_danceability", targetDanceability));
        if (minDurationMs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_duration_ms", minDurationMs));
        if (maxDurationMs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_duration_ms", maxDurationMs));
        if (targetDurationMs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_duration_ms", targetDurationMs));
        if (minEnergy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_energy", minEnergy));
        if (maxEnergy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_energy", maxEnergy));
        if (targetEnergy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_energy", targetEnergy));
        if (minInstrumentalness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_instrumentalness", minInstrumentalness));
        if (maxInstrumentalness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_instrumentalness", maxInstrumentalness));
        if (targetInstrumentalness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_instrumentalness", targetInstrumentalness));
        if (minKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_key", minKey));
        if (maxKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_key", maxKey));
        if (targetKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_key", targetKey));
        if (minLiveness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_liveness", minLiveness));
        if (maxLiveness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_liveness", maxLiveness));
        if (targetLiveness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_liveness", targetLiveness));
        if (minLoudness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_loudness", minLoudness));
        if (maxLoudness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_loudness", maxLoudness));
        if (targetLoudness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_loudness", targetLoudness));
        if (minMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_mode", minMode));
        if (maxMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_mode", maxMode));
        if (targetMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_mode", targetMode));
        if (minPopularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_popularity", minPopularity));
        if (maxPopularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_popularity", maxPopularity));
        if (targetPopularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_popularity", targetPopularity));
        if (minSpeechiness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_speechiness", minSpeechiness));
        if (maxSpeechiness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_speechiness", maxSpeechiness));
        if (targetSpeechiness != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_speechiness", targetSpeechiness));
        if (minTempo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_tempo", minTempo));
        if (maxTempo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_tempo", maxTempo));
        if (targetTempo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_tempo", targetTempo));
        if (minTimeSignature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_time_signature", minTimeSignature));
        if (maxTimeSignature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_time_signature", maxTimeSignature));
        if (targetTimeSignature != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_time_signature", targetTimeSignature));
        if (minValence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("min_valence", minValence));
        if (maxValence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_valence", maxValence));
        if (targetValence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_valence", targetValence));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecommendationsValidateBeforeCall(Integer limit, String market, String seedArtists, String seedGenres, String seedTracks, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getRecommendationsCall(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Recommendations 
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param seedArtists  (optional)
     * @param seedGenres  (optional)
     * @param seedTracks  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @return RecommendationsObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RecommendationsObject getRecommendations(Integer limit, String market, String seedArtists, String seedGenres, String seedTracks, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence) throws ApiException {
        ApiResponse<RecommendationsObject> resp = getRecommendationsWithHttpInfo(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence);
        return resp.getData();
    }

    /**
     * Get Recommendations 
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param seedArtists  (optional)
     * @param seedGenres  (optional)
     * @param seedTracks  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @return ApiResponse&lt;RecommendationsObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RecommendationsObject> getRecommendationsWithHttpInfo(Integer limit, String market, String seedArtists, String seedGenres, String seedTracks, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendationsValidateBeforeCall(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, null, null);
        Type localVarReturnType = new TypeToken<RecommendationsObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Recommendations  (asynchronously)
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @param limit  (optional, default to 20)
     * @param market  (optional)
     * @param seedArtists  (optional)
     * @param seedGenres  (optional)
     * @param seedTracks  (optional)
     * @param minAcousticness  (optional)
     * @param maxAcousticness  (optional)
     * @param targetAcousticness  (optional)
     * @param minDanceability  (optional)
     * @param maxDanceability  (optional)
     * @param targetDanceability  (optional)
     * @param minDurationMs  (optional)
     * @param maxDurationMs  (optional)
     * @param targetDurationMs  (optional)
     * @param minEnergy  (optional)
     * @param maxEnergy  (optional)
     * @param targetEnergy  (optional)
     * @param minInstrumentalness  (optional)
     * @param maxInstrumentalness  (optional)
     * @param targetInstrumentalness  (optional)
     * @param minKey  (optional)
     * @param maxKey  (optional)
     * @param targetKey  (optional)
     * @param minLiveness  (optional)
     * @param maxLiveness  (optional)
     * @param targetLiveness  (optional)
     * @param minLoudness  (optional)
     * @param maxLoudness  (optional)
     * @param targetLoudness  (optional)
     * @param minMode  (optional)
     * @param maxMode  (optional)
     * @param targetMode  (optional)
     * @param minPopularity  (optional)
     * @param maxPopularity  (optional)
     * @param targetPopularity  (optional)
     * @param minSpeechiness  (optional)
     * @param maxSpeechiness  (optional)
     * @param targetSpeechiness  (optional)
     * @param minTempo  (optional)
     * @param maxTempo  (optional)
     * @param targetTempo  (optional)
     * @param minTimeSignature  (optional)
     * @param maxTimeSignature  (optional)
     * @param targetTimeSignature  (optional)
     * @param minValence  (optional)
     * @param maxValence  (optional)
     * @param targetValence  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendationsAsync(Integer limit, String market, String seedArtists, String seedGenres, String seedTracks, BigDecimal minAcousticness, BigDecimal maxAcousticness, BigDecimal targetAcousticness, BigDecimal minDanceability, BigDecimal maxDanceability, BigDecimal targetDanceability, Integer minDurationMs, Integer maxDurationMs, Integer targetDurationMs, BigDecimal minEnergy, BigDecimal maxEnergy, BigDecimal targetEnergy, BigDecimal minInstrumentalness, BigDecimal maxInstrumentalness, BigDecimal targetInstrumentalness, Integer minKey, Integer maxKey, Integer targetKey, BigDecimal minLiveness, BigDecimal maxLiveness, BigDecimal targetLiveness, BigDecimal minLoudness, BigDecimal maxLoudness, BigDecimal targetLoudness, Integer minMode, Integer maxMode, Integer targetMode, Integer minPopularity, Integer maxPopularity, Integer targetPopularity, BigDecimal minSpeechiness, BigDecimal maxSpeechiness, BigDecimal targetSpeechiness, BigDecimal minTempo, BigDecimal maxTempo, BigDecimal targetTempo, Integer minTimeSignature, Integer maxTimeSignature, Integer targetTimeSignature, BigDecimal minValence, BigDecimal maxValence, BigDecimal targetValence, final ApiCallback<RecommendationsObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendationsValidateBeforeCall(limit, market, seedArtists, seedGenres, seedTracks, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RecommendationsObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeveralAudioFeatures
     * @param ids  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSeveralAudioFeaturesCall(String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/audio-features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSeveralAudioFeaturesValidateBeforeCall(String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getSeveralAudioFeatures(Async)");
        }
        
        com.squareup.okhttp.Call call = getSeveralAudioFeaturesCall(ids, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Several Tracks&#x27; Audio Features 
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @return InlineResponse20012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20012 getSeveralAudioFeatures(String ids) throws ApiException {
        ApiResponse<InlineResponse20012> resp = getSeveralAudioFeaturesWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * Get Several Tracks&#x27; Audio Features 
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @return ApiResponse&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20012> getSeveralAudioFeaturesWithHttpInfo(String ids) throws ApiException {
        com.squareup.okhttp.Call call = getSeveralAudioFeaturesValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Several Tracks&#x27; Audio Features  (asynchronously)
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSeveralAudioFeaturesAsync(String ids, final ApiCallback<InlineResponse20012> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSeveralAudioFeaturesValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20012>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeveralTracks
     * @param ids  (required)
     * @param market  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSeveralTracksCall(String ids, String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSeveralTracksValidateBeforeCall(String ids, String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getSeveralTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = getSeveralTracksCall(ids, market, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Several Tracks 
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getSeveralTracks(String ids, String market) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getSeveralTracksWithHttpInfo(ids, market);
        return resp.getData();
    }

    /**
     * Get Several Tracks 
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getSeveralTracksWithHttpInfo(String ids, String market) throws ApiException {
        com.squareup.okhttp.Call call = getSeveralTracksValidateBeforeCall(ids, market, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Several Tracks  (asynchronously)
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @param ids  (required)
     * @param market  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSeveralTracksAsync(String ids, String market, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSeveralTracksValidateBeforeCall(ids, market, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTrack
     * @param id  (required)
     * @param market  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTrackCall(String id, String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tracks/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTrackValidateBeforeCall(String id, String market, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTrack(Async)");
        }
        
        com.squareup.okhttp.Call call = getTrackCall(id, market, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Track 
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @return TrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackObject getTrack(String id, String market) throws ApiException {
        ApiResponse<TrackObject> resp = getTrackWithHttpInfo(id, market);
        return resp.getData();
    }

    /**
     * Get Track 
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @return ApiResponse&lt;TrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackObject> getTrackWithHttpInfo(String id, String market) throws ApiException {
        com.squareup.okhttp.Call call = getTrackValidateBeforeCall(id, market, null, null);
        Type localVarReturnType = new TypeToken<TrackObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Track  (asynchronously)
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @param id  (required)
     * @param market  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTrackAsync(String id, String market, final ApiCallback<TrackObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTrackValidateBeforeCall(id, market, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TrackObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsersSavedTracks
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersSavedTracksCall(String market, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (market != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("market", market));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersSavedTracksValidateBeforeCall(String market, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getUsersSavedTracksCall(market, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get User&#x27;s Saved Tracks 
     * Get a list of the songs saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingSavedTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingSavedTrackObject getUsersSavedTracks(String market, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingSavedTrackObject> resp = getUsersSavedTracksWithHttpInfo(market, limit, offset);
        return resp.getData();
    }

    /**
     * Get User&#x27;s Saved Tracks 
     * Get a list of the songs saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingSavedTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingSavedTrackObject> getUsersSavedTracksWithHttpInfo(String market, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getUsersSavedTracksValidateBeforeCall(market, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User&#x27;s Saved Tracks  (asynchronously)
     * Get a list of the songs saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     * @param market  (optional)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersSavedTracksAsync(String market, Integer limit, Integer offset, final ApiCallback<PagingSavedTrackObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersSavedTracksValidateBeforeCall(market, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingSavedTrackObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsersTopTracks
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersTopTracksCall(String timeRange, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/me/top/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("time_range", timeRange));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersTopTracksValidateBeforeCall(String timeRange, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getUsersTopTracksCall(timeRange, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get User&#x27;s Top Tracks 
     * Get the current user&#x27;s top tracks based on calculated affinity. 
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return PagingTrackObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagingTrackObject getUsersTopTracks(String timeRange, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PagingTrackObject> resp = getUsersTopTracksWithHttpInfo(timeRange, limit, offset);
        return resp.getData();
    }

    /**
     * Get User&#x27;s Top Tracks 
     * Get the current user&#x27;s top tracks based on calculated affinity. 
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PagingTrackObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagingTrackObject> getUsersTopTracksWithHttpInfo(String timeRange, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getUsersTopTracksValidateBeforeCall(timeRange, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<PagingTrackObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get User&#x27;s Top Tracks  (asynchronously)
     * Get the current user&#x27;s top tracks based on calculated affinity. 
     * @param timeRange  (optional, default to medium_term)
     * @param limit  (optional, default to 20)
     * @param offset  (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersTopTracksAsync(String timeRange, Integer limit, Integer offset, final ApiCallback<PagingTrackObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersTopTracksValidateBeforeCall(timeRange, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagingTrackObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeTracksPlaylist
     * @param playlistId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTracksPlaylistCall(String playlistId, PlaylistIdTracksBody2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTracksPlaylistValidateBeforeCall(String playlistId, PlaylistIdTracksBody2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling removeTracksPlaylist(Async)");
        }
        
        com.squareup.okhttp.Call call = removeTracksPlaylistCall(playlistId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 removeTracksPlaylist(String playlistId, PlaylistIdTracksBody2 body) throws ApiException {
        ApiResponse<InlineResponse2008> resp = removeTracksPlaylistWithHttpInfo(playlistId, body);
        return resp.getData();
    }

    /**
     * Remove Playlist Items 
     * Remove one or more items from a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> removeTracksPlaylistWithHttpInfo(String playlistId, PlaylistIdTracksBody2 body) throws ApiException {
        com.squareup.okhttp.Call call = removeTracksPlaylistValidateBeforeCall(playlistId, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Playlist Items  (asynchronously)
     * Remove one or more items from a user&#x27;s playlist. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTracksPlaylistAsync(String playlistId, PlaylistIdTracksBody2 body, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTracksPlaylistValidateBeforeCall(playlistId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeTracksUser
     * @param ids  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeTracksUserCall(String ids, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTracksUserValidateBeforeCall(String ids, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling removeTracksUser(Async)");
        }
        
        com.squareup.okhttp.Call call = removeTracksUserCall(ids, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove User&#x27;s Saved Tracks 
     * Remove one or more tracks from the current user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeTracksUser(String ids, Map<String, Object> body) throws ApiException {
        removeTracksUserWithHttpInfo(ids, body);
    }

    /**
     * Remove User&#x27;s Saved Tracks 
     * Remove one or more tracks from the current user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeTracksUserWithHttpInfo(String ids, Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = removeTracksUserValidateBeforeCall(ids, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove User&#x27;s Saved Tracks  (asynchronously)
     * Remove one or more tracks from the current user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTracksUserAsync(String ids, Map<String, Object> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTracksUserValidateBeforeCall(ids, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for reorderOrReplacePlaylistsTracks
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reorderOrReplacePlaylistsTracksCall(String playlistId, Map<String, Object> body, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replaceAll("\\{" + "playlist_id" + "\\}", apiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uris != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uris", uris));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reorderOrReplacePlaylistsTracksValidateBeforeCall(String playlistId, Map<String, Object> body, String uris, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling reorderOrReplacePlaylistsTracks(Async)");
        }
        
        com.squareup.okhttp.Call call = reorderOrReplacePlaylistsTracksCall(playlistId, body, uris, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#x27;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#x27;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#x27;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#x27;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 reorderOrReplacePlaylistsTracks(String playlistId, Map<String, Object> body, String uris) throws ApiException {
        ApiResponse<InlineResponse2008> resp = reorderOrReplacePlaylistsTracksWithHttpInfo(playlistId, body, uris);
        return resp.getData();
    }

    /**
     * Update Playlist Items 
     * Either reorder or replace items in a playlist depending on the request&#x27;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#x27;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#x27;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#x27;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> reorderOrReplacePlaylistsTracksWithHttpInfo(String playlistId, Map<String, Object> body, String uris) throws ApiException {
        com.squareup.okhttp.Call call = reorderOrReplacePlaylistsTracksValidateBeforeCall(playlistId, body, uris, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Playlist Items  (asynchronously)
     * Either reorder or replace items in a playlist depending on the request&#x27;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#x27;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#x27;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#x27;t be applied together in a single request. 
     * @param playlistId  (required)
     * @param body  (optional)
     * @param uris  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reorderOrReplacePlaylistsTracksAsync(String playlistId, Map<String, Object> body, String uris, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reorderOrReplacePlaylistsTracksValidateBeforeCall(playlistId, body, uris, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveTracksUser
     * @param ids  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveTracksUserCall(String ids, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth_2_0" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveTracksUserValidateBeforeCall(String ids, Map<String, Object> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling saveTracksUser(Async)");
        }
        
        com.squareup.okhttp.Call call = saveTracksUserCall(ids, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveTracksUser(String ids, Map<String, Object> body) throws ApiException {
        saveTracksUserWithHttpInfo(ids, body);
    }

    /**
     * Save Tracks for Current User 
     * Save one or more tracks to the current user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveTracksUserWithHttpInfo(String ids, Map<String, Object> body) throws ApiException {
        com.squareup.okhttp.Call call = saveTracksUserValidateBeforeCall(ids, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save Tracks for Current User  (asynchronously)
     * Save one or more tracks to the current user&#x27;s &#x27;Your Music&#x27; library. 
     * @param ids  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveTracksUserAsync(String ids, Map<String, Object> body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveTracksUserValidateBeforeCall(ids, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}

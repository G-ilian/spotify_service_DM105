/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ImageObject;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.PagingFeaturedPlaylistObject;
import io.swagger.client.model.PagingPlaylistObject;
import io.swagger.client.model.PagingPlaylistTrackObject;
import io.swagger.client.model.PlaylistIdTracksBody2;
import io.swagger.client.model.PlaylistObject;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for PlaylistsApi
 */
@Ignore
public class PlaylistsApiTest {

    private final PlaylistsApi api = new PlaylistsApi();

    /**
     * Add Items to Playlist 
     *
     * Add one or more items to a user&#x27;s playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addTracksToPlaylistTest() throws Exception {
        String playlistId = null;
        Map<String, Object> body = null;
        Integer position = null;
        String uris = null;
        InlineResponse2008 response = api.addTracksToPlaylist(playlistId, body, position, uris);

        // TODO: test validations
    }
    /**
     * Change Playlist Details 
     *
     * Change a playlist&#x27;s name and public/private state. (The user must, of course, own the playlist.) 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void changePlaylistDetailsTest() throws Exception {
        String playlistId = null;
        Map<String, Object> body = null;
        api.changePlaylistDetails(playlistId, body);

        // TODO: test validations
    }
    /**
     * Check if Users Follow Playlist 
     *
     * Check to see if one or more Spotify users are following a specified playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkIfUserFollowsPlaylistTest() throws Exception {
        String playlistId = null;
        String ids = null;
        List<Boolean> response = api.checkIfUserFollowsPlaylist(playlistId, ids);

        // TODO: test validations
    }
    /**
     * Create Playlist 
     *
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPlaylistTest() throws Exception {
        String userId = null;
        Map<String, Object> body = null;
        PlaylistObject response = api.createPlaylist(userId, body);

        // TODO: test validations
    }
    /**
     * Follow Playlist 
     *
     * Add the current user as a follower of a playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void followPlaylistTest() throws Exception {
        String playlistId = null;
        Map<String, Object> body = null;
        api.followPlaylist(playlistId, body);

        // TODO: test validations
    }
    /**
     * Get Category&#x27;s Playlists 
     *
     * Get a list of Spotify playlists tagged with a particular category. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getACategoriesPlaylistsTest() throws Exception {
        String categoryId = null;
        Integer limit = null;
        Integer offset = null;
        PagingFeaturedPlaylistObject response = api.getACategoriesPlaylists(categoryId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get Current User&#x27;s Playlists 
     *
     * Get a list of the playlists owned or followed by the current Spotify user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAListOfCurrentUsersPlaylistsTest() throws Exception {
        Integer limit = null;
        Integer offset = null;
        PagingPlaylistObject response = api.getAListOfCurrentUsersPlaylists(limit, offset);

        // TODO: test validations
    }
    /**
     * Get Featured Playlists 
     *
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player&#x27;s &#x27;Browse&#x27; tab). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFeaturedPlaylistsTest() throws Exception {
        String locale = null;
        Integer limit = null;
        Integer offset = null;
        PagingFeaturedPlaylistObject response = api.getFeaturedPlaylists(locale, limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Playlists 
     *
     * Get a list of the playlists owned or followed by a Spotify user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListUsersPlaylistsTest() throws Exception {
        String userId = null;
        Integer limit = null;
        Integer offset = null;
        PagingPlaylistObject response = api.getListUsersPlaylists(userId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get Playlist 
     *
     * Get a playlist owned by a Spotify user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPlaylistTest() throws Exception {
        String playlistId = null;
        String market = null;
        String fields = null;
        String additionalTypes = null;
        PlaylistObject response = api.getPlaylist(playlistId, market, fields, additionalTypes);

        // TODO: test validations
    }
    /**
     * Get Playlist Cover Image 
     *
     * Get the current image associated with a specific playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPlaylistCoverTest() throws Exception {
        String playlistId = null;
        List<ImageObject> response = api.getPlaylistCover(playlistId);

        // TODO: test validations
    }
    /**
     * Get Playlist Items 
     *
     * Get full details of the items of a playlist owned by a Spotify user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPlaylistsTracksTest() throws Exception {
        String playlistId = null;
        String market = null;
        String fields = null;
        Integer limit = null;
        Integer offset = null;
        String additionalTypes = null;
        PagingPlaylistTrackObject response = api.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes);

        // TODO: test validations
    }
    /**
     * Remove Playlist Items 
     *
     * Remove one or more items from a user&#x27;s playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeTracksPlaylistTest() throws Exception {
        String playlistId = null;
        PlaylistIdTracksBody2 body = null;
        InlineResponse2008 response = api.removeTracksPlaylist(playlistId, body);

        // TODO: test validations
    }
    /**
     * Update Playlist Items 
     *
     * Either reorder or replace items in a playlist depending on the request&#x27;s parameters. To reorder items, include &#x60;range_start&#x60;, &#x60;insert_before&#x60;, &#x60;range_length&#x60; and &#x60;snapshot_id&#x60; in the request&#x27;s body. To replace items, include &#x60;uris&#x60; as either a query parameter or in the request&#x27;s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. &lt;br/&gt; **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can&#x27;t be applied together in a single request. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reorderOrReplacePlaylistsTracksTest() throws Exception {
        String playlistId = null;
        Map<String, Object> body = null;
        String uris = null;
        InlineResponse2008 response = api.reorderOrReplacePlaylistsTracks(playlistId, body, uris);

        // TODO: test validations
    }
    /**
     * Unfollow Playlist 
     *
     * Remove the current user as a follower of a playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unfollowPlaylistTest() throws Exception {
        String playlistId = null;
        api.unfollowPlaylist(playlistId);

        // TODO: test validations
    }
    /**
     * Add Custom Playlist Cover Image 
     *
     * Replace the image used to represent a specific playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void uploadCustomPlaylistCoverTest() throws Exception {
        String body = null;
        String playlistId = null;
        api.uploadCustomPlaylistCover(body, playlistId);

        // TODO: test validations
    }
}

/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.PagingArtistObject;
import io.swagger.client.model.PagingPlaylistObject;
import io.swagger.client.model.PagingTrackObject;
import io.swagger.client.model.PrivateUserObject;
import io.swagger.client.model.PublicUserObject;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Check If User Follows Artists or Users 
     *
     * Check to see if the current user is following one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkCurrentUserFollowsTest() throws Exception {
        String type = null;
        String ids = null;
        List<Boolean> response = api.checkCurrentUserFollows(type, ids);

        // TODO: test validations
    }
    /**
     * Check if Users Follow Playlist 
     *
     * Check to see if one or more Spotify users are following a specified playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkIfUserFollowsPlaylistTest() throws Exception {
        String playlistId = null;
        String ids = null;
        List<Boolean> response = api.checkIfUserFollowsPlaylist(playlistId, ids);

        // TODO: test validations
    }
    /**
     * Follow Artists or Users 
     *
     * Add the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void followArtistsUsersTest() throws Exception {
        String type = null;
        String ids = null;
        Map<String, Object> body = null;
        api.followArtistsUsers(type, ids, body);

        // TODO: test validations
    }
    /**
     * Follow Playlist 
     *
     * Add the current user as a follower of a playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void followPlaylistTest() throws Exception {
        String playlistId = null;
        Map<String, Object> body = null;
        api.followPlaylist(playlistId, body);

        // TODO: test validations
    }
    /**
     * Get Current User&#x27;s Profile 
     *
     * Get detailed profile information about the current user (including the current user&#x27;s username). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCurrentUsersProfileTest() throws Exception {
        PrivateUserObject response = api.getCurrentUsersProfile();

        // TODO: test validations
    }
    /**
     * Get Followed Artists 
     *
     * Get the current user&#x27;s followed artists. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFollowedTest() throws Exception {
        String type = null;
        String after = null;
        Integer limit = null;
        InlineResponse20011 response = api.getFollowed(type, after, limit);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Playlists 
     *
     * Get a list of the playlists owned or followed by a Spotify user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListUsersPlaylistsTest() throws Exception {
        String userId = null;
        Integer limit = null;
        Integer offset = null;
        PagingPlaylistObject response = api.getListUsersPlaylists(userId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Profile 
     *
     * Get public profile information about a Spotify user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersProfileTest() throws Exception {
        String userId = null;
        PublicUserObject response = api.getUsersProfile(userId);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Top Artists 
     *
     * Get the current user&#x27;s top artists based on calculated affinity. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTopArtistsTest() throws Exception {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingArtistObject response = api.getUsersTopArtists(timeRange, limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Top Tracks 
     *
     * Get the current user&#x27;s top tracks based on calculated affinity. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTopTracksTest() throws Exception {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingTrackObject response = api.getUsersTopTracks(timeRange, limit, offset);

        // TODO: test validations
    }
    /**
     * Unfollow Artists or Users 
     *
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unfollowArtistsUsersTest() throws Exception {
        String type = null;
        String ids = null;
        Map<String, Object> body = null;
        api.unfollowArtistsUsers(type, ids, body);

        // TODO: test validations
    }
    /**
     * Unfollow Playlist 
     *
     * Remove the current user as a follower of a playlist. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unfollowPlaylistTest() throws Exception {
        String playlistId = null;
        api.unfollowPlaylist(playlistId);

        // TODO: test validations
    }
}

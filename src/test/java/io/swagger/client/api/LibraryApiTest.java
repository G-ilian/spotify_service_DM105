/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.MeShowsBody;
import io.swagger.client.model.MeShowsBody1;
import io.swagger.client.model.PagingArtistObject;
import io.swagger.client.model.PagingPlaylistObject;
import io.swagger.client.model.PagingSavedAlbumObject;
import io.swagger.client.model.PagingSavedAudiobookObject;
import io.swagger.client.model.PagingSavedEpisodeObject;
import io.swagger.client.model.PagingSavedShowObject;
import io.swagger.client.model.PagingSavedTrackObject;
import io.swagger.client.model.PagingTrackObject;
import io.swagger.client.model.PlaylistObject;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for LibraryApi
 */
@Ignore
public class LibraryApiTest {

    private final LibraryApi api = new LibraryApi();

    /**
     * Change Playlist Details 
     *
     * Change a playlist&#x27;s name and public/private state. (The user must, of course, own the playlist.) 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void changePlaylistDetailsTest() throws Exception {
        String playlistId = null;
        Map<String, Object> body = null;
        api.changePlaylistDetails(playlistId, body);

        // TODO: test validations
    }
    /**
     * Check If User Follows Artists or Users 
     *
     * Check to see if the current user is following one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkCurrentUserFollowsTest() throws Exception {
        String type = null;
        String ids = null;
        List<Boolean> response = api.checkCurrentUserFollows(type, ids);

        // TODO: test validations
    }
    /**
     * Check User&#x27;s Saved Albums 
     *
     * Check if one or more albums is already saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkUsersSavedAlbumsTest() throws Exception {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedAlbums(ids);

        // TODO: test validations
    }
    /**
     * Check User&#x27;s Saved Audiobooks 
     *
     * Check if one or more audiobooks are already saved in the current Spotify user&#x27;s library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkUsersSavedAudiobooksTest() throws Exception {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedAudiobooks(ids);

        // TODO: test validations
    }
    /**
     * Check User&#x27;s Saved Episodes 
     *
     * Check if one or more episodes is already saved in the current Spotify user&#x27;s &#x27;Your Episodes&#x27; library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkUsersSavedEpisodesTest() throws Exception {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedEpisodes(ids);

        // TODO: test validations
    }
    /**
     * Check User&#x27;s Saved Shows 
     *
     * Check if one or more shows is already saved in the current Spotify user&#x27;s library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkUsersSavedShowsTest() throws Exception {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedShows(ids);

        // TODO: test validations
    }
    /**
     * Check User&#x27;s Saved Tracks 
     *
     * Check if one or more tracks is already saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkUsersSavedTracksTest() throws Exception {
        String ids = null;
        List<Boolean> response = api.checkUsersSavedTracks(ids);

        // TODO: test validations
    }
    /**
     * Create Playlist 
     *
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPlaylistTest() throws Exception {
        String userId = null;
        Map<String, Object> body = null;
        PlaylistObject response = api.createPlaylist(userId, body);

        // TODO: test validations
    }
    /**
     * Follow Artists or Users 
     *
     * Add the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void followArtistsUsersTest() throws Exception {
        String type = null;
        String ids = null;
        Map<String, Object> body = null;
        api.followArtistsUsers(type, ids, body);

        // TODO: test validations
    }
    /**
     * Get Current User&#x27;s Playlists 
     *
     * Get a list of the playlists owned or followed by the current Spotify user. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAListOfCurrentUsersPlaylistsTest() throws Exception {
        Integer limit = null;
        Integer offset = null;
        PagingPlaylistObject response = api.getAListOfCurrentUsersPlaylists(limit, offset);

        // TODO: test validations
    }
    /**
     * Get Followed Artists 
     *
     * Get the current user&#x27;s followed artists. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFollowedTest() throws Exception {
        String type = null;
        String after = null;
        Integer limit = null;
        InlineResponse20011 response = api.getFollowed(type, after, limit);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Saved Albums 
     *
     * Get a list of the albums saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersSavedAlbumsTest() throws Exception {
        Integer limit = null;
        Integer offset = null;
        String market = null;
        PagingSavedAlbumObject response = api.getUsersSavedAlbums(limit, offset, market);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Saved Audiobooks 
     *
     * Get a list of the audiobooks saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersSavedAudiobooksTest() throws Exception {
        Integer limit = null;
        Integer offset = null;
        PagingSavedAudiobookObject response = api.getUsersSavedAudiobooks(limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Saved Episodes 
     *
     * Get a list of the episodes saved in the current Spotify user&#x27;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersSavedEpisodesTest() throws Exception {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedEpisodeObject response = api.getUsersSavedEpisodes(market, limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Saved Shows 
     *
     * Get a list of shows saved in the current Spotify user&#x27;s library. Optional parameters can be used to limit the number of shows returned. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersSavedShowsTest() throws Exception {
        Integer limit = null;
        Integer offset = null;
        PagingSavedShowObject response = api.getUsersSavedShows(limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Saved Tracks 
     *
     * Get a list of the songs saved in the current Spotify user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersSavedTracksTest() throws Exception {
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingSavedTrackObject response = api.getUsersSavedTracks(market, limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Top Artists 
     *
     * Get the current user&#x27;s top artists based on calculated affinity. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTopArtistsTest() throws Exception {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingArtistObject response = api.getUsersTopArtists(timeRange, limit, offset);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Top Tracks 
     *
     * Get the current user&#x27;s top tracks based on calculated affinity. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTopTracksTest() throws Exception {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingTrackObject response = api.getUsersTopTracks(timeRange, limit, offset);

        // TODO: test validations
    }
    /**
     * Remove Users&#x27; Saved Albums 
     *
     * Remove one or more albums from the current user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeAlbumsUserTest() throws Exception {
        String ids = null;
        Map<String, Object> body = null;
        api.removeAlbumsUser(ids, body);

        // TODO: test validations
    }
    /**
     * Remove User&#x27;s Saved Audiobooks 
     *
     * Remove one or more audiobooks from the Spotify user&#x27;s library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeAudiobooksUserTest() throws Exception {
        String ids = null;
        api.removeAudiobooksUser(ids);

        // TODO: test validations
    }
    /**
     * Remove User&#x27;s Saved Episodes 
     *
     * Remove one or more episodes from the current user&#x27;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeEpisodesUserTest() throws Exception {
        String ids = null;
        Map<String, Object> body = null;
        api.removeEpisodesUser(ids, body);

        // TODO: test validations
    }
    /**
     * Remove User&#x27;s Saved Shows 
     *
     * Delete one or more shows from current Spotify user&#x27;s library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeShowsUserTest() throws Exception {
        String ids = null;
        MeShowsBody1 body = null;
        String market = null;
        api.removeShowsUser(ids, body, market);

        // TODO: test validations
    }
    /**
     * Remove User&#x27;s Saved Tracks 
     *
     * Remove one or more tracks from the current user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeTracksUserTest() throws Exception {
        String ids = null;
        Map<String, Object> body = null;
        api.removeTracksUser(ids, body);

        // TODO: test validations
    }
    /**
     * Save Albums for Current User 
     *
     * Save one or more albums to the current user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveAlbumsUserTest() throws Exception {
        String ids = null;
        Map<String, Object> body = null;
        api.saveAlbumsUser(ids, body);

        // TODO: test validations
    }
    /**
     * Save Audiobooks for Current User 
     *
     * Save one or more audiobooks to the current Spotify user&#x27;s library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveAudiobooksUserTest() throws Exception {
        String ids = null;
        api.saveAudiobooksUser(ids);

        // TODO: test validations
    }
    /**
     * Save Episodes for Current User 
     *
     * Save one or more episodes to the current user&#x27;s library.&lt;br/&gt; This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveEpisodesUserTest() throws Exception {
        String ids = null;
        Map<String, Object> body = null;
        api.saveEpisodesUser(ids, body);

        // TODO: test validations
    }
    /**
     * Save Shows for Current User 
     *
     * Save one or more shows to current Spotify user&#x27;s library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveShowsUserTest() throws Exception {
        String ids = null;
        MeShowsBody body = null;
        api.saveShowsUser(ids, body);

        // TODO: test validations
    }
    /**
     * Save Tracks for Current User 
     *
     * Save one or more tracks to the current user&#x27;s &#x27;Your Music&#x27; library. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveTracksUserTest() throws Exception {
        String ids = null;
        Map<String, Object> body = null;
        api.saveTracksUser(ids, body);

        // TODO: test validations
    }
    /**
     * Unfollow Artists or Users 
     *
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unfollowArtistsUsersTest() throws Exception {
        String type = null;
        String ids = null;
        Map<String, Object> body = null;
        api.unfollowArtistsUsers(type, ids, body);

        // TODO: test validations
    }
}

/*
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * OpenAPI spec version: 2024.3.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ArtistObject;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.PagingArtistDiscographyAlbumObject;
import io.swagger.client.model.PagingArtistObject;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ArtistsApi
 */
@Ignore
public class ArtistsApiTest {

    private final ArtistsApi api = new ArtistsApi();

    /**
     * Check If User Follows Artists or Users 
     *
     * Check to see if the current user is following one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkCurrentUserFollowsTest() throws Exception {
        String type = null;
        String ids = null;
        List<Boolean> response = api.checkCurrentUserFollows(type, ids);

        // TODO: test validations
    }
    /**
     * Follow Artists or Users 
     *
     * Add the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void followArtistsUsersTest() throws Exception {
        String type = null;
        String ids = null;
        Map<String, Object> body = null;
        api.followArtistsUsers(type, ids, body);

        // TODO: test validations
    }
    /**
     * Get Artist 
     *
     * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAnArtistTest() throws Exception {
        String id = null;
        ArtistObject response = api.getAnArtist(id);

        // TODO: test validations
    }
    /**
     * Get Artist&#x27;s Albums 
     *
     * Get Spotify catalog information about an artist&#x27;s albums. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAnArtistsAlbumsTest() throws Exception {
        String id = null;
        String includeGroups = null;
        String market = null;
        Integer limit = null;
        Integer offset = null;
        PagingArtistDiscographyAlbumObject response = api.getAnArtistsAlbums(id, includeGroups, market, limit, offset);

        // TODO: test validations
    }
    /**
     * Get Artist&#x27;s Related Artists 
     *
     * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community&#x27;s listening history. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAnArtistsRelatedArtistsTest() throws Exception {
        String id = null;
        InlineResponse2001 response = api.getAnArtistsRelatedArtists(id);

        // TODO: test validations
    }
    /**
     * Get Artist&#x27;s Top Tracks 
     *
     * Get Spotify catalog information about an artist&#x27;s top tracks by country. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAnArtistsTopTracksTest() throws Exception {
        String id = null;
        String market = null;
        InlineResponse2002 response = api.getAnArtistsTopTracks(id, market);

        // TODO: test validations
    }
    /**
     * Get Followed Artists 
     *
     * Get the current user&#x27;s followed artists. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFollowedTest() throws Exception {
        String type = null;
        String after = null;
        Integer limit = null;
        InlineResponse20011 response = api.getFollowed(type, after, limit);

        // TODO: test validations
    }
    /**
     * Get Several Artists 
     *
     * Get Spotify catalog information for several artists based on their Spotify IDs. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getMultipleArtistsTest() throws Exception {
        String ids = null;
        InlineResponse2001 response = api.getMultipleArtists(ids);

        // TODO: test validations
    }
    /**
     * Get User&#x27;s Top Artists 
     *
     * Get the current user&#x27;s top artists based on calculated affinity. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTopArtistsTest() throws Exception {
        String timeRange = null;
        Integer limit = null;
        Integer offset = null;
        PagingArtistObject response = api.getUsersTopArtists(timeRange, limit, offset);

        // TODO: test validations
    }
    /**
     * Unfollow Artists or Users 
     *
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unfollowArtistsUsersTest() throws Exception {
        String type = null;
        String ids = null;
        Map<String, Object> body = null;
        api.unfollowArtistsUsers(type, ids, body);

        // TODO: test validations
    }
}
